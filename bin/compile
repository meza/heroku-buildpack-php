#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e
POSTFIX=201502021246
APACHE_VERSION=2.4.10-$POSTFIX
PHP_VERSION=5.5.14-$POSTFIX
VENDOR_VERSION=$POSTFIX

BASE_URL=https://meza.s3.amazonaws.com/heroku

APACHE_PATH="apache"
PHP_PATH="php"

BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
env_dir=$3

# include .files when moving things around
shopt -s dotglob

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
	  for e in $(ls $env_dir); do
		echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      	export "$e=$(cat $env_dir/$e)"
      	:
    	done
	fi
}

indent() {
  c='s/^/ /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *) sed -u "$c";;
  esac
}

error() {
echo " ! $*" >&2
exit 1
}

status() {
echo "-----> $*"
}

cd $BUILD_DIR

mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

APACHE_URL="$BASE_URL/apache-$APACHE_VERSION.tar.gz"
status "Bundling Apache version $APACHE_VERSION"
curl --silent --max-time 60 --location "$APACHE_URL" | tar xz

mkdir -p $BUILD_DIR/apache/logs

VENDORS_URL="$BASE_URL/vendor-$VENDOR_VERSION.tar.gz"
status "Bundling vendors version $VENDOR_VERSION"
curl --silent --max-time 60 --location "$VENDORS_URL" | tar xz

PHP_URL="$BASE_URL/php-$PHP_VERSION.tar.gz"
status "Bundling PHP version $PHP_VERSION"
curl --silent --max-time 60 --location "$PHP_URL" | tar xz
chmod 755 $BUILD_DIR/php/lib/php/extensions/no-debug-non-zts-20121212/*.so

# update config files
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf


mkdir -p bin
ln -s $BUILD_DIR/php/bin/php bin/php
PATH=$PATH:$BUILD_DIR/php/bin
cp $LP_DIR/conf/php.ini php/lib

if [ -f www/package.json ]; then
	semver_range="0.10.26"

	# Resolve node version using semver.io
	node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

	# Recommend using semver ranges in a safe manner
	if [ "$semver_range" == "null" ]; then
		protip "Specify a node version in package.json"
		semver_range=""
	elif [ "$semver_range" == "*" ]; then
		protip "Avoid using semver ranges like '*' in engines.node"
	elif [ ${semver_range:0:1} == ">" ]; then
		protip "Avoid using semver ranges starting with '>' in engines.node"
	fi

	# Output info about requested range and resolved node version
	if [ "$semver_range" == "" ]; then
		status "Defaulting to latest stable node: $node_version"
	else
		status "Requested node range: $semver_range"
		status "Resolved node version: $node_version"
	fi

	status "Downloading and installing node"
	node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
	curl $node_url -s -o - | tar xzf - -C $BUILD_DIR

	rm -rf $BUILD_DIR/vendor/node

	# Move node (and npm) into ./vendor and make them executable
	mkdir -p $BUILD_DIR/vendor
	mv $BUILD_DIR/node-v$node_version-linux-x64 $BUILD_DIR/vendor/node
	chmod +x $BUILD_DIR/vendor/node/bin/*

	PATH=$PATH:$BUILD_DIR/vendor/node/bin

	cd $BUILD_DIR/www

	# If node_modules directory is checked into source control then
	# rebuild any native deps. Otherwise, restore from the build cache.

	if test -d $BUILD_DIR/www/node_modules; then
		status "Found existing node_modules directory; skipping cache"
		status "Rebuilding any native dependencies"
		npm rebuild 2>&1 | indent
	elif test -d $CACHE_DIR/node/node_modules; then
		status "Restoring node_modules directory from cache"
		cp -r $CACHE_DIR/node/node_modules $BUILD_DIR/

		status "Pruning cached dependencies not specified in package.json"
		npm prune 2>&1 | indent

		if test -f $CACHE_DIR/node/.heroku/node-version && [ $(cat $CACHE_DIR/node/.heroku/node-version) != "$node_version" ]; then
			status "Node version changed since last build; rebuilding dependencies"
			npm rebuild 2>&1 | indent
	  fi

	fi

	# Handle npm's new cert bug
	# http://blog.npmjs.org/post/78085451721/npms-self-signed-certificate-is-no-more
	if [ ! -f "$BUILD_DIR/www/.npmrc" ]; then
	status "Writing a custom .npmrc to circumvent npm bugs"
	  status "ca=" > "$BUILD_DIR/www/.npmrc"
	fi

	# Scope config var availability only to `npm install`
	(
	  if [ -d "$env_dir" ]; then
	status "Exporting config vars to environment"
		export_env_dir $env_dir
	  fi

	echo "Installing dependencies"
	  # Make npm output to STDOUT instead of its default STDERR
	  npm install --userconfig $BUILD_DIR/www/.npmrc --production 2>&1 | indent
	)

	PATH=$PATH:$BUILD_DIR/www/node_modules/.bin
	grunt deploy --production

	# Persist goodies like node-version in the slug
	mkdir -p $BUILD_DIR/.heroku

	# Save resolved node version in the slug for later reference
	echo $node_version > $BUILD_DIR/.heroku/node-version

	# Purge node-related cached content, being careful not to purge the top-level
	# cache, for the sake of heroku-buildpack-multi apps.
	rm -rf $CACHE_DIR/node_modules # (for apps still on the older caching strategy)
	rm -rf $CACHE_DIR/node
	mkdir -p $CACHE_DIR/node

	# If app has a node_modules directory, cache it.
	if test -d $BUILD_DIR/www/node_modules; then
	status "Caching node_modules directory for future builds"
	  cp -r $BUILD_DIR/www/node_modules $CACHE_DIR/node
	fi

	# Copy goodies to the cache
	cp -r $BUILD_DIR/.heroku $CACHE_DIR/node

	status "Cleaning up node-gyp and npm artifacts"
	rm -rf "$BUILD_DIR/www/.node-gyp"
	rm -rf "$BUILD_DIR/www/.npm"
fi
cd $BUILD_DIR

if [ -f www/composer.json ] && [ ! -d www/vendor ]; then
GIT_DIR_ORIG=$GIT_DIR
  unset GIT_DIR
  status "Installing Composer dependencies"
  export COMPOSER_URL="http://getcomposer.org/composer.phar"
  curl --silent --max-time 60 --location "$COMPOSER_URL" > www/composer.phar
  cd www
  LD_LIBRARY_PATH=$BUILD_DIR/php/ext:$BUILD_DIR/vendor/pcre/lib:$BUILD_DIR/vendor/libmcrypt/lib $BUILD_DIR/php/bin/php composer.phar install --prefer-source | indent
  rm -rf vendor/**/.git
  cd $BUILD_DIR
  rm www/composer.phar
  export GIT_DIR=$GIT_DIR_ORIG
fi

cat >>boot.sh <<EOF
for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
done
touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/php/lib/php:/app/php/ext:/app/vendor/pcre/lib:/app/vendor/libmcrypt/lib
export PHP_INI_SCAN_DIR=/app/www/.php
echo "Launching apache"
exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

cat >>Procfile <<EOF
web: sh boot.sh
EOF

# clean the cache
rm -rf $CACHE_DIR
